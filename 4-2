#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>

using namespace std; 

class Book {
public:
    string title;
    string author;

    Book(const string& title, const string& author)
        : title(title), author(author) {};
	
	vector<Book> books(string title, string author);
	
};


class BookManager {
private:
    vector<Book> books;

public:
    
    void addBook(const string& title, const string& author) {
        books.push_back(Book(title, author)); 
        cout << "책이 추가되었습니다: " << title << " by " << author << endl;
    }

 
    void displayAllBooks() const {
        if (books.empty()) {
            cout << "현재 등록된 책이 없습니다." << endl;
            return;
        }

        cout << "현재 도서 목록:" << endl;
        for (size_t i = 0; i < books.size(); i++) { 
            cout << "- " << books[i].title << " by " << books[i].author << endl;
        }
    }
    void searchTitle(const string& title)
    {
        for (int i = 0; i < books.size() - 1; i++)
        {
            if (books[i].title == title )
            {
                cout << " 찾았습니다!" << books[i].title << "by" 
					<< books[i].author << endl;
            }
            else
            {
                cout << " 해당 책과 동일한 책은 없습니다." << endl;
            }
        }
    }

    void searchAuthor(const string& author)
    {
        for (int i = 0; i < books.size() - 1; i++)
        {
            if (books[i].author == author)
            {
                cout << " 찾았습니다!" << books[i].title << "by"
					<< books[i].author<< endl;
            }
            else
            {
                cout << " 해당 작가와 동일한 작가는 없습니다." << endl;
            }
        }
    }
};






class BorrowManager {
private:
	map< vector<Book> , int > stock;
	

public:

	

	void initializeStock(vector<Book>books, int quantity)
	{
		for(int i = 0 < books.size()-1; i++)
		{
		stock.insert(make_pair(books[i], 3));
		}
	};

	void borrowBook(vector<Book> title)
	{
		stock.title

	};

	void returnBook()
	{


	};

	void displayStock() 
	{
	for(map <vector<Book>, int> :: iterator it  = stock.begin(); it != stock.end(); it++ )
	{
		cout << "책 이름 : " << it->second << " 제고 : " << it->second << endl;
	}
	};

};


int main()
{
	BookManager manager;
	string title, author;
	while (true)
	{
		cout << "\n도서관 관리 프로그램" << endl;
		cout << "1. 책 추가" << endl;
		cout << "2. 모든 책 출력" << endl;
		cout << "3. 책 검색" << endl;
		cout << "4. 종료" << endl;
		cout << "선택: ";

		int choice, num;
		cin >> choice;

		if (choice == 1)
		{

			string title, author;
			cout << "책 제목: ";
			cin.ignore();
			getline(cin, title);
			cout << "책 저자: ";
			getline(cin, author);
			manager.addBook(title, author);

		}
		else if (choice == 2)
		{
			manager.displayAllBooks();
		}
		else if (choice == 3)
		{
			while (true)
				cout << "1. 책 제목으로 찾기" << endl;
			cout << "2. 작가 이름으로 찾기" << endl;
			cout << "3. 이전 질문으로 돌아가기" << endl;
			cin >> num;
			if (num == 1)
			{
				cout << "책 제목을 입력해주세요. : ";
				cin >> title;
				manager.searchTitle(title);
			}
			else if (num == 2)
			{
				cout << "작가 이름을 입력해주세요. : ";
				cin >> author;
				manager.searchTitle(author);
			}
			else if (num == 3)
			{
				cout << "이전 질문으로 돌아갑니다." << endl;
				break;
			}
			else
			{
				cout << "잘못된 입력입니다. 다시 시도하세요." << endl;
			}
		}

		else if (choice == 4)
		{
			cout << "프로그램을 종료합니다." << endl;
			break;
		}
		else
		{
			cout << "잘못된 입력입니다. 다시 시도하세요." << endl;
		}
	}

	return 0;
}